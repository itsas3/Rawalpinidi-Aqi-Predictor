# -*- coding: utf-8 -*-
"""AQI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KI1VBrNiftlfx5zJ9prLbAHXNhy_RuoE

DATA COLLECTION
"""

import requests
import pandas as pd
import datetime

# Your API key
API_KEY = "1164c94b43e182b37a6138e247cacc2e"

# Rawalpindi coordinates
LAT = 33.6844
LON = 73.0479

# Loop through each day in past year
end_date = datetime.datetime.utcnow()
start_date = end_date - datetime.timedelta(days=365)

data = []
for day in pd.date_range(start=start_date, end=end_date, freq='D'):
    unix_timestamp = int(day.timestamp())
    url = (f"http://api.openweathermap.org/data/2.5/air_pollution/history"
           f"?lat={LAT}&lon={LON}&start={unix_timestamp}&end={unix_timestamp+86400}"
           f"&appid={API_KEY}")
    response = requests.get(url)
    if response.ok:
        day_data = response.json().get('list', [])
        data.extend(day_data)

# Convert to DataFrame
df = pd.json_normalize(data)
df.to_csv('rawalpindi_aqi_history.csv', index=False)

df.head()

"""Data Processing & Feature Engineering"""

print(df.info())

df['datetime'] = pd.to_datetime(df['dt'], unit='s')
df = df.sort_values('datetime')

print(df.isnull().sum())



# Convert UNIX timestamp to readable date
df['datetime'] = pd.to_datetime(df['dt'], unit='s')
df = df.sort_values('datetime')

df['hour'] = df['datetime'].dt.hour
df['day'] = df['datetime'].dt.day
df['weekday'] = df['datetime'].dt.weekday
df['month'] = df['datetime'].dt.month

# AQI change rate
df['aqi_change'] = df['main.aqi'].diff()

# AQI change rate
df['aqi_change'] = df['main.aqi'].diff()
# Rolling average of AQI (3 hours)
df['aqi_roll3'] = df['main.aqi'].rolling(window=3).mean()

# Ratio of PM2.5 to PM10
df['pm_ratio'] = df['components.pm2_5'] / df['components.pm10']
# Rolling averages for PM2.5 and PM10
df['pm2_5_roll3'] = df['components.pm2_5'].rolling(window=3).mean()
df['pm10_roll3'] = df['components.pm10'].rolling(window=3).mean()

# Lagged AQI (previous hour)
df['aqi_lag1'] = df['main.aqi'].shift(1)
# Lagged PM2.5
df['pm2_5_lag1'] = df['components.pm2_5'].shift(1)

df.head()

df = df.dropna()
df.to_csv('processed_aqi_features.csv', index=False)

"""MODEL TRAINING"""

import pandas as pd

df = pd.read_csv("processed_aqi_features.csv")  # Use your file path

df.head()

df.columns

feature_cols = [
    # Original pollutant features
    'components.co', 'components.no', 'components.no2', 'components.o3',
    'components.so2', 'components.pm2_5', 'components.pm10', 'components.nh3',

    # Time-based features
    'hour', 'day', 'weekday', 'month',

    # Engineered features
    'aqi_change', 'aqi_roll3', 'pm_ratio',
    'pm2_5_roll3', 'pm10_roll3', 'aqi_lag1', 'pm2_5_lag1'
]

X = df[feature_cols]
y = df['main.aqi']

import pandas as pd

df = pd.read_csv('processed_aqi_features.csv')
split_idx = int(0.8 * len(df))  # 80% train, 20% test

X = df[feature_cols]
y = df['main.aqi']

X_train, X_test = X.iloc[:split_idx], X.iloc[split_idx:]
y_train, y_test = y.iloc[:split_idx], y.iloc[split_idx:]

from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

y_pred = model.predict(X_test)
print("MAE:", mean_absolute_error(y_test, y_pred))
mse = mean_squared_error(y_test, y_pred)
print("RMSE:", np.sqrt(mse))
print("R²:", r2_score(y_test, y_pred))

import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
plt.barh(feature_cols, model.feature_importances_)
plt.xlabel("Feature Importance")
plt.show()

from sklearn.linear_model import Ridge

ridge = Ridge(alpha=1.0)
ridge.fit(X_train, y_train)
y_pred_ridge = ridge.predict(X_test)

print("Ridge Regression:")
print("MAE:", mean_absolute_error(y_test, y_pred_ridge))
mse_ridge = mean_squared_error(y_test, y_pred_ridge)
print("RMSE:", np.sqrt(mse_ridge))
print("R²:", r2_score(y_test, y_pred_ridge))

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(y_test.values, label='Actual AQI', marker='o')
plt.plot(y_pred_ridge, label='Predicted AQI (Ridge)', linestyle='--', marker='x')
plt.title('Actual vs. Predicted AQI (Ridge Regression)')
plt.xlabel('Sample')
plt.ylabel('AQI')
plt.legend()
plt.tight_layout()
plt.show()

residuals = y_test.values - y_pred_ridge

plt.figure(figsize=(10, 4))
plt.plot(residuals, label='Residuals', marker='.')
plt.axhline(0, color='red', linestyle='--')
plt.title('Residuals (Actual - Predicted) for Ridge Regression')
plt.xlabel('Sample')
plt.ylabel('Error')
plt.legend()
plt.tight_layout()
plt.show()

!pip install xgboost

from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

xgb_model = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=6, random_state=42)
xgb_model.fit(X_train, y_train)
y_pred_xgb = xgb_model.predict(X_test)

print("XGBoost Regressor Results:")
print("MAE:", mean_absolute_error(y_test, y_pred_xgb))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_xgb)))
print("R²:", r2_score(y_test, y_pred_xgb))

import joblib
joblib.dump(ridge, "ridge_model.pkl")

# Get the last row (most recent observation with all features)
last_known = df.iloc[-1:].copy()
print(last_known[feature_cols].T)  # Show latest feature values

"""Step 2: Rolling Forecast for the Next 3 Days (72 Hours)"""

import pandas as pd
import numpy as np

# last_known = last row as a DataFrame (already defined above)
# ridge = your trained Ridge Regression model
# feature_cols = your feature column list

future_steps = 72  # 3 days x 24 hours
forecast = []
last_row = last_known.copy()

for step in range(future_steps):
    # 1. Predict AQI for next hour
    pred_aqi = ridge.predict(last_row[feature_cols])[0]
    forecast.append(pred_aqi)

    # 2. Prepare the next input row (simulate "future" features)
    next_row = last_row.copy()

    # Update lag and rolling features
    next_row['aqi_lag1'] = last_row['main.aqi']
    next_row['pm2_5_lag1'] = last_row['components.pm2_5']

    # --- Fix for float warnings ---
    if step == 0:
        aqi_hist = [
            float(last_row['aqi_lag1'].iloc[0]),
            float(last_row['main.aqi'].iloc[0])
        ]
        pm2_5_hist = [
            float(last_row['pm2_5_lag1'].iloc[0]),
            float(last_row['components.pm2_5'].iloc[0])
        ]
        pm10_hist = [
            float(last_row['components.pm10'].iloc[0]),
            float(last_row['components.pm10'].iloc[0])
        ]
    else:
        aqi_hist.append(pred_aqi)
        pm2_5_hist.append(float(last_row['components.pm2_5'].iloc[0]))
        pm10_hist.append(float(last_row['components.pm10'].iloc[0]))

    # Rolling updates
    next_row['aqi_roll3'] = np.mean(aqi_hist[-3:])
    next_row['pm2_5_roll3'] = np.mean(pm2_5_hist[-3:])
    next_row['pm10_roll3'] = np.mean(pm10_hist[-3:])

    next_row['main.aqi'] = pred_aqi
    next_row['components.pm2_5'] = next_row['pm2_5_roll3']
    next_row['components.pm10'] = next_row['pm10_roll3']
    next_row['aqi_change'] = pred_aqi - float(last_row['main.aqi'].iloc[0])

    # --- Fix for ambiguous Series error ---
    next_hour = int(last_row['hour'].iloc[0]) + 1
    next_row['hour'] = next_hour % 24
    if next_row['hour'].iloc[0] == 0:  # New day
        next_row['day'] = int(last_row['day'].iloc[0]) + 1
        next_row['weekday'] = (int(last_row['weekday'].iloc[0]) + 1) % 7
    else:
        next_row['day'] = int(last_row['day'].iloc[0])
        next_row['weekday'] = int(last_row['weekday'].iloc[0])
    # (Month logic as needed)

    last_row = next_row.copy()


# Build forecast DataFrame
future_dates = pd.date_range(last_known['datetime'].values[0], periods=future_steps+1, freq='H')[1:]
forecast_df = pd.DataFrame({'datetime': future_dates, 'predicted_aqi': forecast})

print(forecast_df.head())

import numpy as np
import pandas as pd

# last_known: DataFrame with your latest row (as shown above)
# ridge: trained Ridge Regression model
# feature_cols: your feature column list

future_steps = 72  # 3 days × 24 hours
forecast = []
last_row = last_known.copy()

# Initialize history for rolling features
aqi_hist = [
    float(last_row['aqi_lag1'].iloc[0]),
    float(last_row['main.aqi'].iloc[0])
]
pm2_5_hist = [
    float(last_row['pm2_5_lag1'].iloc[0]),
    float(last_row['components.pm2_5'].iloc[0])
]
pm10_hist = [
    float(last_row['components.pm10'].iloc[0]),
    float(last_row['components.pm10'].iloc[0])
]

for step in range(future_steps):
    # 1. Predict AQI for next hour
    pred_aqi = ridge.predict(last_row[feature_cols])[0]
    forecast.append(pred_aqi)

    # 2. Prepare the next input row (simulate "future" features)
    next_row = last_row.copy()

    # Update lag features
    next_row['aqi_lag1'] = last_row['main.aqi']
    next_row['pm2_5_lag1'] = last_row['components.pm2_5']

    # Update rolling histories
    aqi_hist.append(pred_aqi)
    pm2_5_hist.append(float(last_row['components.pm2_5'].iloc[0]))
    pm10_hist.append(float(last_row['components.pm10'].iloc[0]))

    # Rolling averages (last 3 values)
    next_row['aqi_roll3'] = np.mean(aqi_hist[-3:])
    next_row['pm2_5_roll3'] = np.mean(pm2_5_hist[-3:])
    next_row['pm10_roll3'] = np.mean(pm10_hist[-3:])

    # Simulate future values
    next_row['main.aqi'] = pred_aqi
    next_row['components.pm2_5'] = next_row['pm2_5_roll3']
    next_row['components.pm10'] = next_row['pm10_roll3']
    next_row['aqi_change'] = pred_aqi - float(last_row['main.aqi'].iloc[0])

    # Update time features (handle rollover)
    next_hour = int(last_row['hour'].iloc[0]) + 1
    next_row['hour'] = next_hour % 24
    if next_row['hour'].iloc[0] == 0:  # New day
        next_row['day'] = int(last_row['day'].iloc[0]) + 1
        next_row['weekday'] = (int(last_row['weekday'].iloc[0]) + 1) % 7
    else:
        next_row['day'] = int(last_row['day'].iloc[0])
        next_row['weekday'] = int(last_row['weekday'].iloc[0])
    # You can add month logic if needed

    # Move to next prediction
    last_row = next_row.copy()

# Create forecast DataFrame
future_dates = pd.date_range(last_known['datetime'].values[0], periods=future_steps+1, freq='H')[1:]
forecast_df = pd.DataFrame({'datetime': future_dates, 'predicted_aqi': forecast})

print(forecast_df.head())

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(forecast_df['datetime'], forecast_df['predicted_aqi'], marker='o')
plt.title('3-Day AQI Forecast (Ridge Regression)')
plt.xlabel('Datetime')
plt.ylabel('Predicted AQI')
plt.grid(True)
plt.tight_layout()
plt.show()

pip install streamlit



import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt

st.title("Rawalpindi AQI 3-Day Forecast Dashboard")
st.write("This dashboard generates and displays predicted AQI for the next 3 days using your trained Ridge Regression model.")

# Load the trained Ridge model
ridge = joblib.load('ridge_model.pkl')

# Load your processed full dataset (the same you used for training)
df = pd.read_csv('processed_aqi_features.csv')

# Get the most recent row as the starting point for forecasting
last_known = df.iloc[[-1]].copy()  # The double brackets keep it as a DataFrame

# Feature columns (same as used for training)
feature_cols = [
    'components.co', 'components.no', 'components.no2', 'components.o3',
    'components.so2', 'components.pm2_5', 'components.pm10', 'components.nh3',
    'hour', 'day', 'weekday', 'month', 'aqi_change', 'aqi_roll3', 'pm_ratio',
    'pm2_5_roll3', 'pm10_roll3', 'aqi_lag1', 'pm2_5_lag1'
]

# Rolling forecast code (copy-paste from above)
future_steps = 72  # 3 days × 24 hours
forecast = []
last_row = last_known.copy()

# Initialize history for rolling features
aqi_hist = [
    float(last_row['aqi_lag1'].iloc[0]),
    float(last_row['main.aqi'].iloc[0])
]
pm2_5_hist = [
    float(last_row['pm2_5_lag1'].iloc[0]),
    float(last_row['components.pm2_5'].iloc[0])
]
pm10_hist = [
    float(last_row['components.pm10'].iloc[0]),
    float(last_row['components.pm10'].iloc[0])
]

for step in range(future_steps):
    pred_aqi = ridge.predict(last_row[feature_cols])[0]
    forecast.append(pred_aqi)

    next_row = last_row.copy()
    next_row['aqi_lag1'] = last_row['main.aqi']
    next_row['pm2_5_lag1'] = last_row['components.pm2_5']
    aqi_hist.append(pred_aqi)
    pm2_5_hist.append(float(last_row['components.pm2_5'].iloc[0]))
    pm10_hist.append(float(last_row['components.pm10'].iloc[0]))
    next_row['aqi_roll3'] = np.mean(aqi_hist[-3:])
    next_row['pm2_5_roll3'] = np.mean(pm2_5_hist[-3:])
    next_row['pm10_roll3'] = np.mean(pm10_hist[-3:])
    next_row['main.aqi'] = pred_aqi
    next_row['components.pm2_5'] = next_row['pm2_5_roll3']
    next_row['components.pm10'] = next_row['pm10_roll3']
    next_row['aqi_change'] = pred_aqi - float(last_row['main.aqi'].iloc[0])
    next_hour = int(last_row['hour'].iloc[0]) + 1
    next_row['hour'] = next_hour % 24
    if next_row['hour'].iloc[0] == 0:
        next_row['day'] = int(last_row['day'].iloc[0]) + 1
        next_row['weekday'] = (int(last_row['weekday'].iloc[0]) + 1) % 7
    else:
        next_row['day'] = int(last_row['day'].iloc[0])
        next_row['weekday'] = int(last_row['weekday'].iloc[0])
    last_row = next_row.copy()

# Create forecast DataFrame
future_dates = pd.date_range(last_known['datetime'].values[0], periods=future_steps+1, freq='h')[1:]
forecast_df = pd.DataFrame({'datetime': future_dates, 'predicted_aqi': forecast})

# Visualization and display
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(pd.to_datetime(forecast_df['datetime']), forecast_df['predicted_aqi'], marker='o', label='Predicted AQI')
ax.set_xlabel('Datetime')
ax.set_ylabel('Predicted AQI')
ax.set_title('3-Day AQI Forecast')
ax.grid(True)
ax.legend()
st.pyplot(fig)

st.subheader("Forecast Data")
st.dataframe(forecast_df)

hazardous = forecast_df['predicted_aqi'] > 4  # Set your own threshold
if hazardous.any():
    st.error("Warning: Hazardous AQI predicted in next 3 days!")
else:
    st.success("No hazardous AQI predicted in next 3 days.")



from google.colab import drive
drive.mount('/content/drive')